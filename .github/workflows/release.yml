name: Build & Release Debian Package

on:
  push:
    tags:
      - "v*.*.*" # v0.0.1 같은 태그 push 시 실행

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build SEA binary (Linux amd64)
        run: |
          npm run build
          ls -lh build

      - name: Package .deb
        run: |
          sudo apt-get update
          sudo apt-get install -y fakeroot

          # 패키지 빌드
          VERSION=${GITHUB_REF_NAME#v}
          mkdir -p debpkg/usr/bin
          cp build/lums debpkg/usr/bin/lums

          # 권한 설정(700)
          chmod 700 debpkg/usr/bin/lums

          # /etc/lums 디렉토리만 (config.json은 프로그램이 생성)
          mkdir -p debpkg/etc/lums



          # control (패키지 메타데이터)
          mkdir -p debpkg/DEBIAN
          cat <<EOF > debpkg/DEBIAN/control
          Package: lums
          Version: ${VERSION}
          Depends: passwd, openssh-client
          Section: utils
          Priority: optional
          Architecture: amd64
          Maintainer: Hyeonwoo Kim <hyenowoo.v24@gmail.com>
          Description: lums - A convinient tool for managing users and groups.
          EOF

          # postinst (설치 후 처리)
          cat > debpkg/DEBIAN/postinst <<'EOF'
          #!/bin/sh
          set -e
          chown root:root /usr/bin/lums || true
          chmod 700 /usr/bin/lums || true
          exit 0
          EOF
          chmod 0755 debpkg/DEBIAN/postinst

          # postrm (제거/완전제거 처리)
          cat > debpkg/DEBIAN/postrm <<'EOF'
          #!/bin/sh
          set -e
          case "$1" in
            remove)
              rmdir --ignore-fail-on-non-empty /etc/lums 2>/dev/null || true
              rmdir --ignore-fail-on-non-empty /var/log/lums 2>/dev/null || true
              ;;
            purge)
              rm -rf /etc/lums || true
              rm -rf /var/log/lums || true
              ;;
          esac
          exit 0
          EOF

          # fakeroot로 빌드(설치 시 root:root로 깔림)
          fakeroot dpkg-deb --build debpkg lums_${VERSION}_amd64.deb

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: deb-package
          path: lums_*_amd64.deb

  publish:
    runs-on: ubuntu-22.04
    needs: build
    permissions:
      contents: write

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: deb-package

      - name: Import GPG key
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf

      - name: Setup repo
        run: |
          sudo apt-get update
          sudo apt-get install -y apt-utils dpkg-dev

          mkdir repo
          mv lums_*_amd64.deb repo/
          cd repo

          # Packages / Packages.gz
          dpkg-scanpackages . /dev/null > Packages
          gzip -9c Packages > Packages.gz

          # Release (해시/Date 자동 포함)
          apt-ftparchive \
            -o APT::FTPArchive::Release::Origin="lums" \
            -o APT::FTPArchive::Release::Label="lums" \
            -o APT::FTPArchive::Release::Suite="stable" \
            -o APT::FTPArchive::Release::Codename="focal" \
            -o APT::FTPArchive::Release::Architectures="amd64" \
            -o APT::FTPArchive::Release::Components="main" \
            release . > Release

          # 공개키 배포(바이너리 키링)
          echo "${{ secrets.GPG_PUBLIC_KEY }}" | gpg --dearmor > lums.gpg

          # Release 서명
          gpg --batch --yes --passphrase "${{ secrets.GPG_PASSPHRASE }}" -abs -o Release.gpg Release
          gpg --batch --yes --passphrase "${{ secrets.GPG_PASSPHRASE }}" --clearsign -o InRelease Release

          echo '<!DOCTYPE html>
          <html>
          <head><meta charset="UTF-8"><title>My Package</title></head>
          <body>
            <h1>Download</h1>
            <p><a href="my-package.deb">Download .deb</a></p>
          </body>
          </html>' > index.html

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./repo
